apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "fullname" . }}-master
  annotations:
    appstore.uninett.no/contact_email: {{ .Values.appstore_generated_data.appstore_meta_data.contact_email }}
  labels:
    app: {{ template "fullname" . }}
    chart: "{{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}"
    release: "{{ .Release.Name }}"
    heritage: "{{ .Release.Service }}"
spec:
  strategy:
    type: Recreate
  replicas: 1
  selector:
    matchLabels:
        app: {{ template "fullname" . }}-master
        group: {{ template "fullname" . }}
        release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        group: {{ template "fullname" . }}
        app: {{ template "fullname" . }}-master
        chart: "{{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}"
        release: "{{ .Release.Name }}"
        heritage: "{{ .Release.Service }}"
      annotations:
        checksum/config: {{ include "oidcconfig" . | sha256sum }}
        appstore.uninett.no/contact_email: {{ .Values.appstore_generated_data.appstore_meta_data.contact_email }}
    spec:
      hostname: {{ template "fullname" . }}-master
      securityContext:
        runAsNonRoot: true
        fsGroup: {{ .Values.gid }}
        {{ $firstGroup := .Values.supplementalGroups | first }}
        {{- if $firstGroup.gid }}
        supplementalGroups:
          {{- range .Values.supplementalGroups }}
          - {{ .gid }}
          {{- end }}
        {{- end }}
      volumes:
        - name: oidcconfig
          secret:
            secretName: {{ template "fullname" . }}
        - name: {{ template "fullname" . }}-rewrite-config
          configMap:
            name: {{ template "fullname" . }}
            items:
            - key: default.conf
              path: default.conf
        - name: {{ template "fullname" . }}-nginx-config
          configMap:
            name: {{ template "fullname" . }}
            items:
            - key: nginx.conf
              path: nginx.conf
        - name: passwd
          configMap:
            name: {{ template "fullname" . }}
            items:
            - key: passwd
              path: passwd
        - name: group
          configMap:
            name: {{ template "fullname" . }}
            items:
            - key: group
              path: group
      {{- if ne (first .Values.persistentStorage).existingClaim "" }}
        {{- range .Values.persistentStorage }}
        - name: {{ .existingClaimName }}
          persistentVolumeClaim:
            claimName: {{ .existingClaim }}
        {{- end }}
      initContainers:
      - name: busybox
        image: registry.uninett.no/public/busybox:1.33.1-glibc
        securityContext:
          runAsUser: {{ .Values.uid }}
          runAsGroup: {{ .Values.gid }}
        args:
          - /bin/sh
          - -c
          - -x
          - "mkdir -p /mnt/{{ (first .Values.persistentStorage).existingClaimName }}/.tools/{{ template "fullname" . }}/master && chmod g+w /mnt/{{ (first .Values.persistentStorage).existingClaimName }}/.tools"
        volumeMounts:
        - name: {{ (first .Values.persistentStorage).existingClaimName }}
          mountPath: /mnt/{{ (first .Values.persistentStorage).existingClaimName }}
          mountPropagation: HostToContainer
      {{- end }}
      containers:
        - name: proxy-rewriter
          image: nginx:1.21.0-alpine
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 9001
          securityContext:
            runAsUser: 100
          volumeMounts:
            - name: {{ template "fullname" . }}-rewrite-config
              mountPath: /etc/nginx/conf.d
            - name: {{ template "fullname" . }}-nginx-config
              mountPath: /etc/nginx/nginx.conf
              subPath: nginx.conf
        - name: auth-proxy
          image: sigma2as/goidc-proxy:next
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 8000
          securityContext:
            runAsUser: 65534
            readOnlyRootFilesystem: true
          livenessProbe:
            httpGet:
              path: /healthz
              port: 8000
            initialDelaySeconds: 30
            timeoutSeconds: 30
          volumeMounts:
            - name: oidcconfig
              mountPath: /conf
          workingDir: /conf
        - name: spark-master
          image: {{ .Values.advanced.dockerImage }}
          imagePullPolicy: IfNotPresent
          args: ["/usr/local/bin/start-master.sh"]
          ports:
            - containerPort: 7077
            - containerPort: 8080
          livenessProbe:
            httpGet:
              path: /
              port: 8080
            initialDelaySeconds: 30
            timeoutSeconds: 30
          securityContext:
            runAsUser: {{ .Values.uid }}
            runAsGroup: {{ .Values.gid }}
          resources:
            requests:
                cpu: {{ .Values.advanced.master.resources.requests.cpu }}
                memory: {{ .Values.advanced.master.resources.requests.memory }}
            limits:
                cpu: {{ .Values.advanced.master.resources.limits.cpu }}
                memory: {{ .Values.advanced.master.resources.limits.memory }}
          env:
            - name: SPARK_PUBLIC_DNS
              value: {{ .Values.ingress.host }}
            - name: SPARK_DAEMON_MEMORY
              value: {{ .Values.advanced.master.resources.requests.memory }}
            - name: SPARK_DAEMON_CORES
              value: {{ .Values.advanced.master.resources.requests.cpu | quote }}
            - name: OWNER_ID
              value: {{ .Values.appstore_generated_data.dataporten.owner }}
          {{- if ne (first .Values.persistentStorage).existingClaim "" }}
            - name: SPARK_RECOVERY_DIR
              value: /mnt/{{ (first .Values.persistentStorage).existingClaimName }}
          {{- end }}
          volumeMounts:
          - name: passwd
            mountPath: /etc/passwd
            subPath: passwd
          - name: group
            mountPath: /etc/group
            subPath: group
          {{- if ne (first .Values.persistentStorage).existingClaim "" }}
          - name: {{ (first .Values.persistentStorage).existingClaimName }}
            mountPath: /mnt/{{ (first .Values.persistentStorage).existingClaimName }}
            mountPropagation: HostToContainer
            subPath: .tools/{{ template "fullname" . }}/master
          {{- range (rest .Values.persistentStorage) }}
          - name: {{ .existingClaimName }}
            mountPath: /mnt/{{ .existingClaimName }}
            mountPropagation: HostToContainer
            {{- if ne .subPath "/" }}
            subPath: {{ .subPath }}
            {{- end }}
          {{- end }}
          {{- end }}


{{- if ne (first .Values.persistentStorage).existingClaim "" }}
---
apiVersion: batch/v1
kind: Job
metadata:
  name: "{{.Release.Name}}-cleaner"
  labels:
    heritage: {{.Release.Service | quote }}
    release: {{.Release.Name | quote }}
    chart: "{{.Chart.Name}}-{{.Chart.Version}}"
  annotations:
    appstore.uninett.no/contact_email: {{ .Values.appstore_generated_data.appstore_meta_data.contact_email }}
    "helm.sh/hook": post-delete
    "helm.sh/hook-weight": "2"
    "helm.sh/hook-delete-policy": hook-succeeded
spec:
  template:
    metadata:
      name: "{{.Release.Name}}-cleaner"
      labels:
        heritage: {{.Release.Service | quote }}
        release: {{.Release.Name | quote }}
        chart: "{{.Chart.Name}}-{{.Chart.Version}}"
    spec:
      volumes:
      - name: {{ (first .Values.persistentStorage).existingClaimName }}
        persistentVolumeClaim:
          claimName: {{ (first .Values.persistentStorage).existingClaim }}
      restartPolicy: Never
      securityContext:
        runAsNonRoot: true
        runAsUser: {{ .Values.uid }}
        runAsGroup: {{ .Values.gid }}
        fsGroup: {{ .Values.gid }}
        {{ $firstGroup := .Values.supplementalGroups | first }}
        {{- if $firstGroup.gid }}
        supplementalGroups:
          {{- range .Values.supplementalGroups }}
          - {{ .gid }}
          {{- end }}
        {{- end }}
      containers:
      - name: cleaner-job
        image: "registry.uninett.no/public/alpine:3.13.5"
        imagePullPolicy: IfNotPresent
        command:
          - /bin/sh
        args:
          - -c
          - -x
          - "rm -rf /mnt/{{ (first .Values.persistentStorage).existingClaimName }}/.tools/{{ template "fullname" . }}"
        volumeMounts:
        - name: {{ (first .Values.persistentStorage).existingClaimName }}
          mountPath: /mnt/{{ (first .Values.persistentStorage).existingClaimName }}
          mountPropagation: HostToContainer
          {{ if ne (first .Values.persistentStorage).subPath "/" }}
          subPath: {{ (first .Values.persistentStorage).subPath }}
          {{ end }}
{{ end }}
