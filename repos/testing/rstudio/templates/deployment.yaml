apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "fullname" . }}
  annotations:
    appstore.uninett.no/contact_email: {{ .Values.appstore_generated_data.appstore_meta_data.contact_email }}
  labels:
    app: {{ template "fullname" . }}
    chart: "{{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}"
    release: "{{ .Release.Name }}"
    heritage: "{{ .Release.Service }}"
spec:
  strategy:
    type: Recreate
  replicas: 1
  selector:
    matchLabels:
        app: {{ template "fullname" . }}
        release: {{ .Release.Name }}
  template:
    metadata:
      annotations:
        checksum/config: {{ include "oidcconfig" . | sha256sum }}
        appstore.uninett.no/contact_email: {{ .Values.appstore_generated_data.appstore_meta_data.contact_email }}
      labels:
        app: {{ template "fullname" . }}
        chart: "{{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}"
        release: "{{ .Release.Name }}"
        heritage: "{{ .Release.Service }}"
    spec:
      volumes:
        - name: oidcconfig
          secret:
            secretName: {{ template "fullname" . }}
        - name: proxy-config
          configMap:
            name: {{ template "fullname" . }}
            items:
            - key: default.conf
              path: default.conf
        - name: passwd
          configMap:
            name: {{ template "fullname" . }}
            items:
            - key: passwd
              path: passwd
        - name: group
          configMap:
            name: {{ template "fullname" . }}
            items:
            - key: group
              path: group
        - name: shadow
          configMap:
            name: {{ template "fullname" . }}
            items:
            - key: shadow
              path: shadow
        - name: shm
          emptyDir:
            medium: Memory
            sizeLimit: 256M
        - name: indexhtml
          configMap:
            name: {{ template "fullname" . }}
            items:
            - key: index.html
              path: index.html
        - name: shinyserver
          configMap:
            name: {{ template "fullname" . }}
            items:
            - key: shiny-server.conf
              path: shiny-server.conf
        {{ if ne .Values.persistentStorage.existingClaim "" }}
        - name: {{ .Values.persistentStorage.existingClaimName }}
          persistentVolumeClaim:
            claimName: {{ .Values.persistentStorage.existingClaim }}
      initContainers:
      - name: busybox
        image: registry.uninett.no/public/busybox:1.33.1-glibc
        securityContext:
          runAsUser: {{ .Values.uid }}
          runAsGroup: {{ .Values.gid }}
        args:
          - /bin/sh
          - -c
          - -x
          - "mkdir -p /mnt/{{ .Values.persistentStorage.existingClaimName }}/.tools/{{ template "fullname" . }} /mnt/{{ .Values.persistentStorage.existingClaimName }}/home/{{ .Values.username }} && chmod g+w /mnt/{{ .Values.persistentStorage.existingClaimName }}/.tools /mnt/{{ .Values.persistentStorage.existingClaimName }}/home"
        volumeMounts:
        - name: {{ .Values.persistentStorage.existingClaimName }}
          mountPath: /mnt/{{ .Values.persistentStorage.existingClaimName }}
          mountPropagation: HostToContainer
        {{ end }}
      hostname: {{ template "fullname" . }}
      securityContext:
        runAsNonRoot: true
        fsGroup: {{ .Values.gid }}
        {{ $firstGroup := .Values.supplementalGroups | first }}
        {{- if $firstGroup.gid }}
        supplementalGroups:
          {{- range .Values.supplementalGroups }}
          - {{ .gid }}
          {{- end }}
        {{- end }}
      containers:
      - name: auth-proxy
        image: registry.uninett.no/public/goidc-proxy:v1.1.5
        imagePullPolicy: IfNotPresent
        env:
          - name: DATAPORTEN_CLIENTID
            valueFrom:
              secretKeyRef:
                name: {{ template "fullname" . }}
                key: dataporten_client_id
          - name: DATAPORTEN_CLIENTSECRET
            valueFrom:
              secretKeyRef:
                name: {{ template "fullname" . }}
                key: dataporten_client_secret
        ports:
          - containerPort: 8080
        securityContext:
          runAsUser: 65534
          readOnlyRootFilesystem: true
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8080
          initialDelaySeconds: 30
          timeoutSeconds: 30
        volumeMounts:
          - name: oidcconfig
            mountPath: /conf
        workingDir: /conf
      - name: rstudio-proxy
        image: {{ .Values.advanced.proxyImage }}
        imagePullPolicy: IfNotPresent
        volumeMounts:
          - name: proxy-config
            mountPath: /etc/nginx/conf.d
          - name: indexhtml
            mountPath: /usr/share/nginx/html/index.html
            subPath: index.html
        securityContext:
          runAsUser: 65534
      - name: rstudio-server
        image: {{ .Values.advanced.dockerImage }}
        resources:
{{ toYaml .Values.resources | indent 10 }}
        ports:
        - containerPort: 8787
        - containerPort: 3838
        livenessProbe:
          httpGet:
            path: /unsupported_browser.htm
            port: 8787
          initialDelaySeconds: 30
          timeoutSeconds: 30
        securityContext:
          runAsUser: {{ .Values.uid }}
          runAsGroup: {{ .Values.gid }}
        env:
        - name: TZ
          value: Europe/Oslo
        - name: OWNER_ID
          value: {{ .Values.appstore_generated_data.dataporten.owner }}
        {{- if ne .Values.persistentStorage.existingClaim "" }}
        - name: HOME
          value: /home/{{ .Values.username }}
        - name: USERNAME
          value: {{ .Values.username }}
        - name: SHINY_APPS_PATH
          value: /mnt/{{ .Values.persistentStorage.existingClaimName }}/.tools/{{ template "fullname" . }}/shiny-server
        - name: PVC_MOUNT_PATH
          value: /mnt/{{ .Values.persistentStorage.existingClaimName }}
        {{- end }}
        volumeMounts:
        - name: passwd
          mountPath: /etc/passwd
          subPath: passwd
        - name: group
          mountPath: /etc/group
          subPath: group
        - name: shadow
          mountPath: /etc/shadow
          subPath: shadow
        - name: shm
          mountPath: /dev/shm
        - name: shinyserver
          mountPath: /etc/shiny-server/shiny-server.conf
          subPath: shiny-server.conf
        {{- if ne .Values.persistentStorage.existingClaim "" }}
        - name: {{ .Values.persistentStorage.existingClaimName }}
          mountPath: /mnt/{{ .Values.persistentStorage.existingClaimName }}
          mountPropagation: HostToContainer
          readOnly: {{ .Values.persistentStorage.readOnly }}
          {{ if ne .Values.persistentStorage.subPath "/" }}
          subPath: {{ .Values.persistentStorage.subPath }}
          {{ end }}
        - name: {{ .Values.persistentStorage.existingClaimName }}
          mountPath: /home/{{ .Values.username }}
          mountPropagation: HostToContainer
          readOnly: {{ .Values.persistentStorage.readOnly }}
          subPath: home/{{ .Values.username }}
        {{- end -}}


{{ if ne .Values.persistentStorage.existingClaim "" }}
---
apiVersion: batch/v1
kind: Job
metadata:
  name: "{{.Release.Name}}-cleaner"
  labels:
    heritage: {{.Release.Service | quote }}
    release: {{.Release.Name | quote }}
    chart: "{{.Chart.Name}}-{{.Chart.Version}}"
  annotations:
    appstore.uninett.no/contact_email: {{ .Values.appstore_generated_data.appstore_meta_data.contact_email }}
    "helm.sh/hook": post-delete
    "helm.sh/hook-weight": "2"
    "helm.sh/hook-delete-policy": hook-succeeded
spec:
  template:
    metadata:
      name: "{{.Release.Name}}-cleaner"
      labels:
        heritage: {{.Release.Service | quote }}
        release: {{.Release.Name | quote }}
        chart: "{{.Chart.Name}}-{{.Chart.Version}}"
    spec:
      volumes:
      - name: {{ .Values.persistentStorage.existingClaimName }}
        persistentVolumeClaim:
          claimName: {{ .Values.persistentStorage.existingClaim }}
      restartPolicy: Never
      securityContext:
        runAsNonRoot: true
        runAsUser: {{ .Values.uid }}
        runAsGroup: {{ .Values.gid }}
        fsGroup: {{ .Values.gid }}
        {{ $firstGroup := .Values.supplementalGroups | first }}
        {{- if $firstGroup.gid }}
        supplementalGroups:
          {{- range .Values.supplementalGroups }}
          - {{ .gid }}
          {{- end }}
        {{- end }}
      containers:
      - name: cleaner-job
        image: "registry.uninett.no/public/alpine:3.13.5"
        imagePullPolicy: IfNotPresent
        command:
          - /bin/sh
        args:
          - -c
          - -x
          - "rm -rf /mnt/{{ .Values.persistentStorage.existingClaimName }}/.tools/{{ template "fullname" . }}"
        volumeMounts:
        - name: {{ .Values.persistentStorage.existingClaimName }}
          mountPath: /mnt/{{ .Values.persistentStorage.existingClaimName }}
{{ end }}
