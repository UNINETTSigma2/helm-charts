apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-hub
  annotations:
    appstore.uninett.no/contact_email: {{ .Values.appstore_generated_data.appstore_meta_data.contact_email }}
  labels:
    app: {{ template "fullname" . }}
    chart: "{{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}"
    release: "{{ .Release.Name }}"
    heritage: "{{ .Release.Service }}"
spec:
  strategy:
    type: Recreate
  replicas: 1
  selector:
    matchLabels:
      app: {{ template "fullname" . }}
      name: {{ .Release.Name }}-hub
      group: {{ .Release.Name }}-jupyterhub
      component: hub
      release: {{ .Release.Name }}
      heritage: {{ .Release.Service }}
  template:
    metadata:
      labels:
        app: {{ template "fullname" . }}
        name: {{ .Release.Name }}-hub
        group: {{ .Release.Name }}-jupyterhub
        component: hub
        release: {{ .Release.Name }}
        heritage: {{ .Release.Service }}
        chart: "{{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}"
      annotations:
        # This lets us autorestart when the configmap changes!
        checksum/config-map: {{ include (print $.Template.BasePath "/hub/configmap.yaml") . | sha256sum }}
        checksum/secret: {{ include (print $.Template.BasePath "/hub/secret.yaml") . | sha256sum }}
        appstore.uninett.no/contact_email: {{ .Values.appstore_generated_data.appstore_meta_data.contact_email }}
    spec:
      affinity:
        podAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 1
              podAffinityTerm:
                topologyKey: kubernetes.io/hostname
                labelSelector:
                  matchExpressions:
                    - key: component
                      operator: In
                      values: ['proxy']
                    - key: release
                      operator: In
                      values: [ {{ .Release.Name | quote }} ]
      securityContext:
        runAsNonRoot: true
        fsGroup: {{ .Values.gid }}
        {{ $firstGroup := .Values.supplementalGroups | first }}
        {{- if $firstGroup.gid }}
        supplementalGroups:
          {{- range .Values.supplementalGroups }}
          - {{ .gid }}
          {{- end }}
        {{- end }}
      volumes:
      - name: config
        configMap:
          name: {{ .Release.Name }}-hub-config
          items:
          - key: values.yaml
            path: values.yaml
      - name: secret
        secret:
          secretName: {{ .Release.Name }}-hub-secret
      - name: passwd
        configMap:
          name: {{ template "fullname" . }}
          items:
          - key: passwd
            path: passwd
      - name: group
        configMap:
          name: {{ template "fullname" . }}
          items:
          - key: group
            path: group
      {{- if ne (first .Values.persistentStorage).existingClaim "" }}
      - name: {{ (first .Values.persistentStorage).existingClaimName }}
        persistentVolumeClaim:
          claimName: {{ (first .Values.persistentStorage).existingClaim }}
      initContainers:
      - name: busybox
        image: registry.uninett.no/public/busybox:1.33.1-glibc
        securityContext:
          runAsUser: {{ .Values.uid }}
          runAsGroup: {{ .Values.gid }}
        args:
          - /bin/sh
          - -c
          - -x
          - "mkdir -p /mnt/{{ (first .Values.persistentStorage).existingClaimName }}/.tools/{{ .Release.Name }}-hub && \
            mkdir -p  /mnt/{{ (first .Values.persistentStorage).existingClaimName }}/.tools/{{ .Release.Name }}-mlflow && \
            mkdir -p  /mnt/{{ (first .Values.persistentStorage).existingClaimName }}/.tools/{{ .Release.Name }}-tensorboard && \
            mkdir -p /mnt/{{ (first .Values.persistentStorage).existingClaimName }}/home && \
            chmod g+w /mnt/{{ (first .Values.persistentStorage).existingClaimName }}/.tools/{{ .Release.Name }}-mlflow && \
            chmod g+w /mnt/{{ (first .Values.persistentStorage).existingClaimName }}/.tools/{{ .Release.Name }}-tensorboard && \
            chmod g+w /mnt/{{ (first .Values.persistentStorage).existingClaimName }}/.tools && \
            chmod g+w /mnt/{{ (first .Values.persistentStorage).existingClaimName }}/home"
        volumeMounts:
        - name: {{ (first .Values.persistentStorage).existingClaimName }}
          mountPropagation: HostToContainer
          mountPath: /mnt/{{ (first .Values.persistentStorage).existingClaimName }}
      {{- end }}
      containers:
      - name: hub-container
        image: quay.io/nird-toolkit/jupyterhub-server:20220302-40d6346
        command:
          - jupyterhub
          - --config
          - /srv/jupyterhub_config.py
          - --upgrade-db
        securityContext:
          runAsUser: {{ .Values.uid }}
          runAsGroup: {{ .Values.gid }}
        volumeMounts:
          - mountPath: /etc/jupyterhub/config/values.yaml
            subPath: values.yaml
            name: config
          - mountPath: /etc/jupyterhub/secret/values.yaml
            subPath: values.yaml
            name: secret
          - name: passwd
            mountPath: /etc/passwd
            subPath: passwd
          - name: group
            mountPath: /etc/group
            subPath: group
          {{- if ne (first .Values.persistentStorage).existingClaim "" }}
          - name: {{ (first .Values.persistentStorage).existingClaimName }}
            mountPath: /srv/jupyterhub
            mountPropagation: HostToContainer
            subPath: .tools/{{ .Release.Name }}-hub
          {{- end }}
        resources:
{{ toYaml .Values.users.resources.selected | indent 12 }}
        env:
        # Put this here directly so hub will restart when we
        # change this
        - name: SINGLEUSER_IMAGE
          value:  "{{ .Values.advanced.userImage }}"
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        {{- if ne (first .Values.persistentStorage).existingClaim "" }}
        - name: COOKIE_SECRET_FILE_PATH
          value: /srv/jupyterhub/jupyterhub_cookie_secret
        {{- end }}
        - name: OWNER_ID
          value: {{ .Values.appstore_generated_data.dataporten.owner }}
        - name: PROXY_PUBLIC_SERVICE_NAME
          value: {{ .Release.Name | upper | replace "-" "_" }}_PROXY_HTTP_SERVICE
        - name: PROXY_API_SERVICE_NAME
          value: {{ .Release.Name | upper | replace "-" "_" }}_PROXY_API_SERVICE
        - name: HUB_SERVICE_NAME
          value: {{ .Release.Name | upper | replace "-" "_" }}_HUB_SERVICE
        - name: OAUTH_CLIENT_ID
          value: "{{ .Values.appstore_generated_data.dataporten.id }}"
        - name: OAUTH_CLIENT_SECRET
          value: "{{ .Values.appstore_generated_data.dataporten.client_secret }}"
        - name: OAUTH_CALLBACK_URL
          value: "https://{{ .Values.ingress.host }}/hub/oauth_callback"
        - name: GROUP_URLS
          value: "{{ include "all_endpoints" . }}"
        - name: AUTHORIZED_GROUPS
          value: "{{- join "," .Values.appstore_generated_data.dataporten.authorized_groups -}}"
        - name: OAUTH2_USERDATA_URL
          value: {{ .Values.userInfoURL }}
        - name: CONFIGPROXY_AUTH_TOKEN
          valueFrom:
            secretKeyRef:
              name: {{ .Release.Name }}-hub-secret
              key: proxy.token
        - name: OAUTH2_TOKEN_URL
          value: "https://auth.dataporten.no/oauth/token"
        - name: OAUTH2_AUTHORIZE_URL
          value: "https://auth.dataporten.no/oauth/authorization"
        - name: GROUP_URLS
          value: "https://apps-mas-sigma.dataporten-api.no/groups/me/groups,https://groups-api.dataporten.no/groups/me/groups"
        ports:
          - containerPort: 8081
      serviceAccountName: {{ .Release.Name }}-hub



{{- if ne (first .Values.persistentStorage).existingClaim "" }}
---
apiVersion: batch/v1
kind: Job
metadata:
  name: "{{.Release.Name}}-cleaner"
  labels:
    heritage: {{.Release.Service | quote }}
    release: {{.Release.Name | quote }}
    chart: "{{.Chart.Name}}-{{.Chart.Version}}"
    app: {{ template "fullname" . }}
    chart: "{{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}"
  annotations:
    appstore.uninett.no/contact_email: {{ .Values.appstore_generated_data.appstore_meta_data.contact_email }}
    "helm.sh/hook": post-delete
    "helm.sh/hook-weight": "-6"
    "helm.sh/hook-delete-policy": hook-succeeded
spec:
  template:
    metadata:
      name: "{{.Release.Name}}-cleaner"
      labels:
        heritage: {{.Release.Service | quote }}
        release: {{.Release.Name | quote }}
        chart: "{{.Chart.Name}}-{{.Chart.Version}}"
        app: {{ template "fullname" . }}
    spec:
      volumes:
      - name: {{ (first .Values.persistentStorage).existingClaimName }}
        persistentVolumeClaim:
          claimName: {{ (first .Values.persistentStorage).existingClaim }}
      restartPolicy: Never
      securityContext:
        runAsNonRoot: true
        runAsUser: {{ .Values.uid }}
        runAsGroup: {{ .Values.gid }}
        fsGroup: {{ .Values.gid }}
        {{ $firstGroup := .Values.supplementalGroups | first }}
        {{- if $firstGroup.gid }}
        supplementalGroups:
          {{- range .Values.supplementalGroups }}
          - {{ .gid }}
          {{- end }}
        {{- end }}
      containers:
      - name: cleaner-job
        image: "registry.uninett.no/public/alpine:3.13.5"
        imagePullPolicy: Always
        command:
          - /bin/sh
        args:
          - -c
          - -x
          - "rm -rf /mnt/{{ (first .Values.persistentStorage).existingClaimName }}/.tools/{{ template "fullname" . }} /mnt/{{ (first .Values.persistentStorage).existingClaimName }}/.minio.sys /mnt/{{ (first .Values.persistentStorage).existingClaimName }}/.minio || true"
        volumeMounts:
        - name: {{ (first .Values.persistentStorage).existingClaimName }}
          mountPath: /mnt/{{ (first .Values.persistentStorage).existingClaimName }}
          mountPropagation: HostToContainer
          {{ if ne (first .Values.persistentStorage).subPath "/" }}
          subPath: {{ (first .Values.persistentStorage).subPath }}
          {{ end }}
{{ end }}

{{- if .Values.advanced.minio.enabled }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "fullname" . }}-minio
  annotations:
    appstore.uninett.no/contact_email: {{ .Values.appstore_generated_data.appstore_meta_data.contact_email }}
  labels:
    chart: "{{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}"
spec:
  strategy:
    type: Recreate
  replicas: 1
  selector:
    matchLabels:
        app: {{ template "fullname" . }}-minio
        group: {{ .Release.Name }}-jupyterhub
        release: {{ .Release.Name }}
        chart: "{{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}"
  template:
    metadata:
      annotations:
        appstore.uninett.no/contact_email: {{ .Values.appstore_generated_data.appstore_meta_data.contact_email }}
      labels:
        group: {{ .Release.Name }}-jupyterhub
        app: {{ template "fullname" . }}-minio
        release: {{ .Release.Name }}
        chart: "{{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}"
    spec:
      volumes:
        - name: passwd
          configMap:
            name: {{ template "fullname" . }}
            items:
            - key: passwd
              path: passwd
        - name: group
          configMap:
            name: {{ template "fullname" . }}
            items:
            - key: group
              path: group
      {{- if ne (first .Values.persistentStorage).existingClaim "" }}
        {{- range .Values.persistentStorage }}
        - name: {{ .existingClaimName }}
          persistentVolumeClaim:
            claimName: {{ .existingClaim }}
        {{- end }}
      initContainers:
      - name: busybox
        image: registry.uninett.no/public/busybox:1.33.1-glibc
        securityContext:
          runAsUser: {{ .Values.uid }}
          runAsGroup: {{ .Values.gid }}
        args:
          - /bin/sh
          - -c
          - -x
          - "mkdir -p /mnt/{{ (first .Values.persistentStorage).existingClaimName }}/.tools/{{ template "fullname" . }} && chmod g+w /mnt/{{ (first .Values.persistentStorage).existingClaimName }}/.tools"
        volumeMounts:
        {{- range .Values.persistentStorage }}
        - name: {{ .existingClaimName }}
          mountPath: /mnt/{{ .existingClaimName }}
          mountPropagation: HostToContainer
          {{ if ne .subPath "/" }}
          subPath: {{ .subPath }}
          mountPropagation: HostToContainer
          {{ end }}
        {{- end }}
      {{- end }}
      securityContext:
        runAsNonRoot: true
        fsGroup: {{ .Values.gid }}
        {{ $firstGroup := .Values.supplementalGroups | first }}
        {{- if $firstGroup.gid }}
        supplementalGroups:
          {{- range .Values.supplementalGroups }}
          - {{ .gid }}
          {{- end }}
        {{- end }}
      containers:
      - name: minio
        env:
        - name: MINIO_ROOT_USER
          valueFrom:
            secretKeyRef:
              name: {{ template "fullname" . }}-minio
              key: MINIO_ROOT_USER
        - name: MINIO_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ template "fullname" . }}-minio
              key: MINIO_ROOT_PASSWORD
        - name: TZ
          value: Europe/Oslo
        image: quay.io/nird-toolkit/minio:20220216-9500986
        {{- if ne (first .Values.persistentStorage).existingClaim "" }}
        args: [ 'server', '--quiet', '--console-address', ':8999', '/mnt/{{ (first .Values.persistentStorage).existingClaimName }}' ]
        {{- else }}
        args: [ 'server', '--quiet', '--console-address', ':8999', '/tmp' ]
        {{- end }}
        resources:
          requests:
            cpu: 200m
            memory: 200M
          limits:
            cpu: 400m
            memory: 400M
        ports:
        - containerPort: 9000
        - containerPort: 8999
        securityContext:
          runAsUser: {{ .Values.uid }}
          runAsGroup: {{ .Values.gid }}
        livenessProbe:
          httpGet:
            path: /minio/health/live
            port: 9000
          initialDelaySeconds: 30
          timeoutSeconds: 30
        volumeMounts:
        - name: passwd
          mountPath: /etc/passwd
          subPath: passwd
        - name: group
          mountPath: /etc/group
          subPath: group
        {{- if ne (first .Values.persistentStorage).existingClaim "" }}
        {{- range .Values.persistentStorage }}
        - name: {{ .existingClaimName }}
          mountPath: /mnt/{{ .existingClaimName }}
          mountPropagation: HostToContainer
          {{ if ne .subPath "/" }}
          subPath: {{ .subPath }}
          {{ end }}
        {{- end }}
        {{ end }}
{{- end }}

{{- if .Values.advanced.ipyparallel.enabled }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "fullname" . }}-ipyworkers
  annotations:
    appstore.uninett.no/contact_email: {{ .Values.appstore_generated_data.appstore_meta_data.contact_email }}
  labels:
    app: {{ template "fullname" . }}-ipyworkers
    chart: "{{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}"
    release: "{{ .Release.Name }}"
    heritage: "{{ .Release.Service }}"
spec:
  strategy:
    type: Recreate
  replicas: {{ .Values.advanced.ipyparallel.workers }}
  selector:
    matchLabels:
        app: {{ template "fullname" . }}-ipyworkers
        group: {{ .Release.Name }}-jupyterhub
        release: {{ .Release.Name }}
  template:
    metadata:
      annotations:
        appstore.uninett.no/contact_email: {{ .Values.appstore_generated_data.appstore_meta_data.contact_email }}
      labels:
        group: {{ .Release.Name }}-jupyterhub
        app: {{ template "fullname" . }}-ipyworkers
        chart: "{{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}"
        release: "{{ .Release.Name }}"
        heritage: "{{ .Release.Service }}"
    spec:
      volumes:
      - name: ipyparallel-config
        secret:
          secretName: {{ .Release.Name }}-ipyparallel-config
    {{- if ne (first .Values.persistentStorage).existingClaim "" }}
      {{- range .Values.persistentStorage }}
      - name: {{ .existingClaimName }}
        persistentVolumeClaim:
          claimName: {{ .existingClaim }}
      {{- end }}
    {{- end }}
      securityContext:
        runAsNonRoot: true
        fsGroup: 65534
      containers:
      - name: worker
        command:
          - /bin/sh
          - -c
          - -x
          - 'mkdir -p /tmp/.ipython/profile_default/security && cp /tmp/ipcontroller-*.json /tmp/.ipython/profile_default/security/ && sleep 15 && /opt/conda/bin/ipengine --timeout=30 --ipython-dir=/tmp/.ipython --location={{ .Release.Name }}-ipycontroller --port=9001'
        image: {{ .Values.advanced.ipyparallel.image }}
        workingDir: /tmp
        resources:
          requests:
            cpu: {{ .Values.advanced.ipyparallel.resources.requests.cpu }}
            memory: {{ .Values.advanced.ipyparallel.resources.requests.memory }}
            nvidia.com/gpu: {{ .Values.advanced.ipyparallel.resources.requests.gpu }}
          limits:
            cpu: {{ .Values.advanced.ipyparallel.resources.limits.cpu }}
            memory: {{ .Values.advanced.ipyparallel.resources.limits.memory }}
            nvidia.com/gpu: {{ .Values.advanced.ipyparallel.resources.limits.gpu }}
        securityContext:
          runAsUser: 65534
          runAsGroup: 65534
        volumeMounts:
          - mountPath: /tmp/ipcontroller-engine.json
            subPath: ipcontroller-engine.json
            name: ipyparallel-config
          - mountPath: /tmp/ipcontroller-client.json
            subPath: ipcontroller-client.json
            name: ipyparallel-config
          {{- if ne (first .Values.persistentStorage).existingClaim "" }}
          - name: {{ (first .Values.persistentStorage).existingClaimName }}
            mountPath: /home/
            mountPropagation: HostToContainer
            subPath: "{{ template "subPath" (first .Values.persistentStorage) }}{{ .Values.advanced.userHomeSubPath }}"
          {{- range .Values.persistentStorage }}
          - name: {{ .existingClaimName }}
            mountPath: /mnt/{{ .existingClaimName }}
            mountPropagation: HostToContainer
            {{ if ne .subPath "/" }}
            subPath: {{ .subPath }}
            {{ end }}
          {{- end }}
          {{ end }}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "fullname" . }}-ipycontroller
  annotations:
    appstore.uninett.no/contact_email: {{ .Values.appstore_generated_data.appstore_meta_data.contact_email }}
  labels:
    app: {{ template "fullname" . }}
    chart: "{{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}"
    release: "{{ .Release.Name }}"
    heritage: "{{ .Release.Service }}"
spec:
  strategy:
    type: Recreate
  replicas: 1
  selector:
    matchLabels:
        app: {{ template "fullname" . }}-ipycontroller
        group: {{ .Release.Name }}-jupyterhub
        release: {{ .Release.Name }}
  template:
    metadata:
      annotations:
        appstore.uninett.no/contact_email: {{ .Values.appstore_generated_data.appstore_meta_data.contact_email }}
      labels:
        group: {{ .Release.Name }}-jupyterhub
        app: {{ template "fullname" . }}-ipycontroller
        release: {{ .Release.Name }}
        chart: "{{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}"
        heritage: "{{ .Release.Service }}"
    spec:
      securityContext:
        runAsNonRoot: true
        fsGroup: 65534
      volumes:
      - name: ipyparallel-config
        secret:
          secretName: {{ .Release.Name }}-ipyparallel-config
      containers:
      - name: worker
        volumeMounts:
          - mountPath: /tmp/ipcontroller-engine.json
            subPath: ipcontroller-engine.json
            name: ipyparallel-config
          - mountPath: /tmp/ipcontroller-client.json
            subPath: ipcontroller-client.json
            name: ipyparallel-config
        command:
          - /bin/sh
          - -c
          - -x
          - "mkdir -p /tmp/.ipython/profile_default/security && chmod -R g+w /tmp/.ipython && cp /tmp/ipcontroller-*.json /tmp/.ipython/profile_default/security/ && /opt/conda/bin/ipcontroller --ipython-dir=/tmp/.ipython --reuse --ip=* --port 9001"
        image: {{ .Values.advanced.ipyparallel.image }}
        resources:
          requests:
            cpu: 500m
            memory: 512M
          limits:
            cpu: "1"
            memory: 512M
        securityContext:
          runAsUser: 65534
          runAsGroup: 65534
{{- end }}
