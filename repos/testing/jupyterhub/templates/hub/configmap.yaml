kind: ConfigMap
apiVersion: v1
metadata:
  name: {{ .Release.Name }}-hub-config
  annotations:
    appstore.uninett.no/contact_email: {{ .Values.appstore_generated_data.appstore_meta_data.contact_email }}
  labels:
    app: {{ template "fullname" . }}
    chart: "{{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}"
    release: "{{ .Release.Name }}"
    heritage: "{{ .Release.Service }}"
data:
  values.yaml: |
    {{- /* Auth */}}
    auth:
      type: "dataporten"
      state:
        enabled: false
      admin:
        access: true
        users:
          - {{ .Values.appstore_generated_data.dataporten.owner }}
          {{- if ne (first .Values.advanced.additionalAdmin) "" }}
          {{- range .Values.advanced.additionalAdmin }}
          - {{ . }}
          {{- end }}
          {{- end }}

    {{- /* Cull */}}
    {{- if .Values.advanced.killIdlePods.enabled }}
    cull:
      enabled: "true"
      users: "false"
      timeout: {{ .Values.advanced.killIdlePods.timeout | quote }}
      every: "600"
      concurrency: {{ .Values.advanced.killIdlePods.concurrency | quote }}
    {{- end }}

    {{- /* Singleuser */}}
    singleuser:
      image:
        name: "{{ .Values.advanced.userImage }}"
        pullPolicy: IfNotPresent
      startTimeout: {{ .Values.advanced.startTimeout }}
      scheduler-strategy: pack
      uid: 999
      fsGid: {{ .Values.gid }}
    {{- if .Values.advanced.jupyterLab }}
      defaultUrl: "/lab"
    {{- end }}
      extraEnv:
        RELEASE_NAME: "{{ .Release.Name }}"
        JUPYTER_HUB: "1"
        PVC_MOUNT_PATH: /mnt/data
    {{- if .Values.advanced.jupyterLab }}
        JUPYTER_ENABLE_LAB: "1"
    {{- end }}
      {{ $firstGroup := .Values.supplementalGroups | first }}
      {{- if $firstGroup.gid }}
      supplemental-gids:
        {{- range .Values.supplementalGroups }}
        - {{ .gid }}
        {{- end }}
      {{- end }}
      serviceAccountName: "default"
      pod-name-template: "{{.Release.Name}}-jupyter-{username}"
      nodeSelector: {}
      storage:
        extraVolumes:
          - name: "passwd"
            configMap:
              name: "{{ template "fullname" . }}"
              items:
                - key: "passwd"
                  path: "passwd"
          - name: "group"
            configMap:
              name: "{{ template "fullname" . }}"
              items:
                - key: "group"
                  path: "group"
          - name: "shm"
            emptyDir:
              medium: "Memory"
              sizeLimit: "256M"
        {{- if .Values.advanced.ipyparallel.enabled }}
          - name: ipyparallel-config
            secret:
              secretName: {{ .Release.Name }}-ipyparallel-config
        {{- end }}
        {{- if ne (first .Values.persistentStorage).existingClaim "" }}
        {{- range .Values.persistentStorage }}
          - name: {{ .existingClaimName }}
            persistentVolumeClaim:
              claimName: {{ .existingClaim }}
        {{- end }}
        {{- end }}
        extraVolumeMounts:
          - name: "passwd"
            mountPath: "/etc/passwd"
            subPath: "passwd"
          - name: "group"
            mountPath: "/etc/group"
            subPath: "group"
          - name: "shm"
            mountPath: "/dev/shm"
          {{- if .Values.advanced.ipyparallel.enabled }}
          - name: ipyparallel-config
            mountPath: /tmp/ipcontroller-client.json
            mountPropagation: "HostToContainer"
            subPath: ipcontroller-client.json
            readOnly: true
          {{- end }}
          {{- if ne (first .Values.persistentStorage).existingClaim "" }}
          {{- $sharedSubPath := .Values.advanced.sharedData.subPath }}
          {{- $sharedReadOnly := .Values.advanced.sharedData.readOnly }}
          {{- if .Values.advanced.sharedData.enabled }}
          {{- range .Values.persistentStorage }}
          - name: "{{ .existingClaimName }}"
            mountPath: "/mnt/{{ .existingClaimName }}"
            mountPropagation: "HostToContainer"
            subPath: "{{ template "subPath" . }}{{ $sharedSubPath }}"
            readOnly: {{ $sharedReadOnly }}
          {{- end }}
          {{- end }}
          {{- end }}
    {{- if ne (first .Values.persistentStorage).existingClaim "" }}
        type: "static"
        static:
          pvcName: "{{ (first .Values.persistentStorage).existingClaimName }}"
          {{- if .Values.advanced.userHomeAddStorageSubPath }}
          subPath: "{{ template "subPath" (first .Values.persistentStorage) }}{{ .Values.advanced.userHomeSubPath }}/{username}"
          {{- else }}
          subPath: "{{ .Values.advanced.userHomeSubPath }}/{username}"
          {{- end }}
    {{- else }}
        type: "none"
    {{- end }}
        homeMountPath: "/home/{username}"
      {{- if .Values.userNotebookType.resources.limits.memory }}
      memory:
        limit: {{ .Values.userNotebookType.resources.limits.memory | quote }}
      {{- end }}
      {{- if .Values.userNotebookType.resources.requests.memory }}
        guarantee: {{ .Values.userNotebookType.resources.requests.memory | quote}}
      {{- end }}
      {{- if .Values.userNotebookType.resources.limits.cpu }}
      cpu:
        limit: {{ .Values.userNotebookType.resources.limits.cpu }}
      {{- end }}
      {{- if .Values.userNotebookType.resources.requests.cpu }}
        guarantee: {{ .Values.userNotebookType.resources.requests.cpu }}
      {{- end }}
      {{- if .Values.userNotebookType.resources.requests.gpu }}
      extraResource:
        guarantees:
          nvidia.com/gpu: {{ .Values.userNotebookType.resources.requests.gpu }}
      {{- end }}
      {{- if .Values.userNotebookType.resources.limits.gpu }}
        limits:
          nvidia.com/gpu: {{ .Values.userNotebookType.resources.requests.gpu }}
      {{- end }}
      extraLabels:
        hub.jupyter.org/network-access-hub: "true"

      {{- if .Values.advanced.vnc.enabled }}
      extra-containers:
        - name: "viz"
          image: "{{ .Values.advanced.vnc.image }}"
          args: ["-w"]
          env:
            - name: "VNC_PW"
              value: "test"
            - name: "HOME"
              value: "/home/vncuser"
          volumeMounts:
            - name: "passwd"
              mountPath: "/etc/passwd"
              subPath: "passwd"
            - name: "group"
              mountPath: "/etc/group"
              subPath: "group"
            - name: "shm"
              mountPath: "/dev/shm"
              {{- if ne (first .Values.persistentStorage).existingClaim "" }}
            - name: {{ (first .Values.persistentStorage).existingClaimName }}
              mountPath: "/home/notebook"
              mountPropagation: "HostToContainer"
              subPath: "{{ template "subPath" (first .Values.persistentStorage) }}{{ .Values.advanced.userHomeSubPath }}/{username}"
              {{- end }}
          resources:
            requests:
              cpu: "{{ .Values.advanced.vnc.resources.requests.cpu }}"
              memory: "{{ .Values.advanced.vnc.resources.requests.memory }}"
            limits:
              cpu: "{{ .Values.advanced.vnc.resources.limits.cpu }}"
              memory: "{{ .Values.advanced.vnc.resources.limits.memory }}"
      {{- end }}

    custom:
      common-labels:
        group: {{ .Release.Name }}-jupyterhub
        release: {{ .Release.Name }}
        heritage: {{ .Release.Service }}

    hub:
      base_url: "/"
      db_url: "sqlite:///jupyterhub.sqlite" # Use in memory
      concurrent-spawn-limit: {{ .Values.advanced.notebook.spawnLimit | quote }}
      extraConfig: |
        c.Spawner.http_timeout = {{ .Values.advanced.startTimeout }}
        c.Spawner.start_timeout = {{ .Values.advanced.startTimeout }}
    debug:
      enabled: {{ .Values.advanced.debug | quote }}

{{- if ne (first .Values.persistentStorage).existingClaim "" }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "fullname" . }}-minio
  annotations:
    appstore.uninett.no/contact_email: {{ .Values.appstore_generated_data.appstore_meta_data.contact_email }}
  labels:
    chart: "{{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}"
data:
  passwd: {{ include "minio-passwd" . | quote }}
  group: {{ include "minio-group" . | quote }}
{{- end }}
